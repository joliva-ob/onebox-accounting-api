FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# onebox-accounting-api

API is about to allow users to manage cash flow accounts with debit and credit amounts.

To do so, we have used a **API Blueprint** standard, **apiary** as an online editing and mocking tool, **aglio** to document it and **getsandbox** as a sandbox provider:
+ [API Blueprint](https://apiblueprint.org/)
+ [apiary.io](http://docs.oneboxaccountingapi.apiary.io/)
+ [getsandbox.com](http://onebox-accounting-api.getsandbox.com/)
+ [aglio](https://github.com/danielgtaylor/aglio)
+ [github](https://github.com/joliva-ob/onebox-accounting-api)
+ [onebox-developer](http://developer.oneboxtickets.com/accounting-api/)

## Provider vs Client relationship management [/accounting-api/1.0/providers/{providerId}/clients/{clientId}]

This let you manage a complete CRUD over the relations between providers and clients.
Basically this creates a new relation between a given provider and client with an empty debit and credit amounts.
The default status will be 'true'.
If realtion already exists the status will turn into 'true'.
Delete the link by changing the status into false.

### Provider-client list all relations [GET]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.


+ Response 200 (application/json)

        [
            {
                "idProvider": 65,
                "idClient": 11,
                "debitAmount": 111100,
                "creditAmount": 1050,
                “totalAmount” : 112150,
                "currencyCode": "EUR",
                “active”: true
            },
            {
                "idProvider": 65,
                "idClient": 12,
                "debitAmount": 111100,
                "creditAmount": 1050,
                “totalAmount” : 112150,
                "currencyCode": "EUR",
                “active”: false
            }
        ]

### Provider-client creation or modification a relationship [PUT]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + clientId (required, number) ... Filter by the given client.

+ Request

      + Body

            {
                "idProvider": 65,
                "idClient": 11,
                "debitAmount": 111100,
                "creditAmount": 1050,
                “totalAmount” : 112150,
                "currencyCode": "EUR",
                “active”: true
            }

+ Response 200 (application/json)

        {
            "idProvider": 65,
            "idClient": 11,
            "debitAmount": 111100,
            "creditAmount": 1050,
            “totalAmount” : 112150,
            "currencyCode": "EUR",
            “active”: true
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

### Provider-client delete relationship [DELETE]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + clientId (required, number) ... Filter by the given client.

+ Response 200 (application/json)

        {
            "idProvider": 65,
            "idClient": 11,
            "debitAmount": 111100,
            "creditAmount": 1050,
            “totalAmount” : 112150,
            "currencyCode": "EUR",
            “active”: false
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

## Provider vs Channel relationship management [/accounting-api/1.0/providers/{providerId}/channels/{channelId}]

This let you manage a complete CRUD over the relations between providers and onsale channels.
Basically this creates a new relation between a given provider and an onsale channel with an empty debit and credit amounts.
The default status will be 'true'.
If realtion already exists the status will turn into 'true'.
Delete the link by changing the status into false.

### List all provider-channel relations [GET]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.


+ Response 200 (application/json)

        [
            {
                "id": 1,
                "providerId":  9,
                "channelId":  65,
                "active":  true,
                "merchantCode": "000000009   00000006  5",
                "secretKey": "XXXXXXX"
            },
            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5",
                "secretKey": "XXXXXXX"
            }
        ]

### Provider-channel relation creation or modification [PUT]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.

+ Request

      + Body

            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5",
                "secretKey": "XXXXXXX"
            }

+ Response 200 (application/json)

            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5",
                "secretKey": "XXXXXXX"
            }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

### Provider-channel delete relationship [DELETE]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given client.

+ Response 200 (application/json)

        {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  false,
                "merchantCode": "000000009   00000006  5",
                "secretKey": "XXXXXXX"
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

## Accounting Payment [/accounting-api/1.0/accounting/payment?{providerId,channelId,clientId,amount,currencyCode,locator,username}]

Validate if the operation can be performed and will process it.

### Accounting Payment [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + amount (required, number) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])

        Available currency choices are:

        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound

    + locator (required, string) ... Purchase identifier
    + username (required, string) ... Client username indentifier

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting Refund [/accounting-api/1.0/accounting/refund?{providerId,channelId,clientId,amount,currencyCode,locator,username}]

Validate if the operation can be performed and will proceed to return the money back.

### Accounting Refund [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + amount (required, number) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])
        Available currency choices are:
        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound

    + locator (required, string) ... Purchase identifier
    + username (required, string) ... Client username indentifier

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting AddCreditAmount [/accounting-api/1.0/accounting/AddCreditAmount?{providerId,channelId,clientId,amount,currencyCode,username,password}]

Validate if the operation can be performed and will proceed to add the money to the credit account.

### Accounting AddCreditAmount [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + amount (required, number) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])
        Available currency choices are:
        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound

    + username (required, string) ... Client username indentifier
    + password (required, string) ... Client username password

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting AddDebitAmount [/accounting-api/1.0/accounting/AddDebitAmount?{providerId,channelId,clientId,amount,currencyCode,transactionType,transactionId,username,password}]

Validate if the operation can be performed and will proceed to add the money to the debit account.

### Accounting AddDebitAmount [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + amount (required, number) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])
        Available currency choices are:
        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound
    + transactionType (required,  enum[string])
        Available currency choices are:
        + Members
            + `CHECK` - Check
            + `TRANS` - Online banking transference
            + `CASH` - Cash
    + transactionId (required, string) ... Transaction identifier.
    + username (required, string) ... Client username indentifier
    + password (required, string) ... Client username password

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting ModifyAmount [/accounting-api/1.0/accounting/ModifyAmount?{providerId,channelId,clientId,amount,currencyCode,accountType,comment,username,password}]

Ammend the total balance amount from the debit or credit account.

### Accounting ModifyAmount [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + amount (required, number) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])
        Available currency choices are:
        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound
    + accountType (required,  enum[string])
        Available currency choices are:
        + Members
            + `DEBIT` - Debit
            + `CREDIT` - Credit
    + comment (required, string) ... Notes
    + username (required, string) ... Client username indentifier
    + password (required, string) ... Client username password

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting CheckBalance [/accounting-api/1.0/accounting/CheckBalance?{providerId,channelId,clientId,username,password}]

Get the balance from a given account (debit, credit and total available amount)

### Accounting CheckBalance [POST]

+ Parameters
    + providerId (required, number) ... Filter by the given provider.
    + channelId (required, number) ... Filter by the given channel.
    + clientId (required, number) ... Filter by the given client.
    + username (required, string) ... Client username indentifier
    + password (required, string) ... Client username password

+ Response 200 (application/json)

        {
          "status": true,
          "movementId": "9_4_1c09_1472730770333",
          "statusCode": null,
          "statusDescription": null,
          "data": {}
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }

## Accounting Auditory [/accounting-api/1.0/auditories?{dateFrom},{dateTo},{providerId},{clientId},{username},{movementType},{transactionType},{locator},{freeText},{fromElement},{numberOfResults}]

Retrive the last auditory movements from the given provider id.

### Accounting Auditory [GET]

+ Parameters
    + dateFrom (optional, date) ... Filter by the given from date.
    + dateTo (optional, number) ... Filter by the given to date.
    + providerId (optional, number) ... Filter by the given provider.
    + clientId (optional, number) ... Filter by the given clientId.
    + username (optional, string) ... Filter by the given username.
    + movementType (optional, enum) ... Filter by the given movementType (ADD_AMOUNT(1), MODIFY_AMOUNT(2), PAYMENT(3), REFUND(4), CHANGE_MAX_CREDIT(5)).
    + transactionType (optional, enum) ... Filter by the given transactionType (CHECK(1), CASH(2), WIRE(3)).
    + locator (optional, string) ... Filter by the given locator.
    + freeText (optional, string) ... Filter by the given text.
    + fromElement (optional, number, `0`) ... starts the result from the given index.
    + numberOfResults (optional, number, `50`) ... returns the given number of results.

+ Response 200 (application/json)
        
        {
            "transactionAudits":
                [
                    {
                        "movementId": "9_4_1c09_1472730770333",
                        "amount": 145.43,
                        "accountType": "DEBIT",
                        "action" = "ADD"
                    },
                    {
                        "movementId": "9_4_1c09_1472730770334",
                        "amount": 145.43,
                        "accountType": "CREDIT",
                        "action" = "SUBSTRACT"
                    }
                ]
            "totalElements":18
        }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

+ Response 500 (application/json)

        {
          "status": false,
          "movementId": null,
          "statusCode": "400G0001",
          "statusDescription": "clientId cannot be null or less than 0",
          "data": {}
        }