FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# onebox-accounting-api

API is about to allow users to manage cash flow accounts with debit and credit amounts.

To do so, we have used a **API Blueprint** standard, **apiary** as an online editing and mocking tool, **aglio** to document it and **getsandbox** as a sandbox provider:
+ [API Blueprint](https://apiblueprint.org/)
+ [apiary.io](http://docs.oneboxaccountingapi.apiary.io/)
+ [getsandbox.com](http://onebox-accounting-api.getsandbox.com/)
+ [aglio](https://github.com/danielgtaylor/aglio)
+ [github](https://github.com/joliva-ob/onebox-accounting-api)
+ [onebox-developer](http://developer.oneboxtickets.com/accounting-api/)

## Provider vs Client relationship management [/providers/{providerId}/clients/{clientId}]

This let you manage a complete CRUD over the relations between providers and clients

### List all provider-client relations [GET]

+ Parameters

    + providerId (required, number, 65) ... Filter by the given provider.


+ Response 200 (application/json)

        [
            {
                "idProvider": 65, 
                "idClient": 11,
                "debitAmount": 111100,
                "creditAmount": 1050, 
                “totalAmount” : 112150, 
                "currencyCode": "EUR", 
                “active”: true 
            },
            {
                "idProvider": 65, 
                "idClient": 12,
                "debitAmount": 111100,
                "creditAmount": 1050, 
                “totalAmount” : 112150, 
                "currencyCode": "EUR", 
                “active”: false 
            }
        ]

### Provider-client relation creation or modification [PUT]

Basically this creates a new relation between a given provider and client with an empty debit and credit amounts. 
The default status will be 'true'. 
If realtion already exists the status will turn into 'true'.

+ Parameters

    + providerId (required, number, 65) ... Filter by the given provider.
    + clientId (required, number, 1) ... Filter by the given client.
    
+ Request

      + Body

            {
                "idProvider": 65, 
                "idClient": 11,
                "debitAmount": 111100,
                "creditAmount": 1050, 
                “totalAmount” : 112150, 
                "currencyCode": "EUR", 
                “active”: true 
            }

+ Response 200 (application/json)

            {
                "idProvider": 65, 
                "idClient": 11,
                "debitAmount": 111100,
                "creditAmount": 1050, 
                “totalAmount” : 112150, 
                "currencyCode": "EUR", 
                “active”: true 
            }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }
        
## Provider vs Channel relationship management [/providers/{providerId}/channels/{channelId}]

This let you manage a complete CRUD over the relations between providers and onsale channels

### List all provider-channel relations [GET]

+ Parameters
    + providerId (required, number, 65) ... Filter by the given provider.


+ Response 200 (application/json)

        [
            {
                "id": 1,
                "providerId":  9,
                "channelId":  65,
                "active":  true,
                "merchantCode": "000000009   00000006  5", 
                "secretKey": "XXXXXXX"
            },
            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5", 
                "secretKey": "XXXXXXX"
            }
        ]

### Provider-channel relation creation or modification [PUT]

Basically this creates a new relation between a given provider and an onsale channel with an empty debit and credit amounts. 
The default status will be 'true'. 
If realtion already exists the status will turn into 'true'.

+ Parameters

    + providerId (required, number, 65) ... Filter by the given provider.
    + channelId (required, number, 1) ... Filter by the given channel.
    
+ Request

      + Body

            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5", 
                "secretKey": "XXXXXXX"
            }

+ Response 200 (application/json)

            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5", 
                "secretKey": "XXXXXXX"
            }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }

## Accounting pre-order [/accounting/preorder?{providerId,channelId,clientId,amount,currencyCode}]

Perform a pre-order checks in order to validate if the operation must be allowed or not.

### Accounting pre-order validation [POST]

+ Parameters

    + providerId (required, number, 65) ... Filter by the given provider.
    + channelId (required, number, 1) ... Filter by the given channel.
    + clientId (required, number, 11) ... Filter by the given client.
    + amount (required, number, 165.32) ... Total amount to be substracted from accounting
    + currencyCode (required,  enum[string])

        Available currency choices are:

        + Members
            + `EUR` - Euro
            + `USD` - US dollar
            + `GBP` - Great Britain Pound

+ Response 200 (application/json)

            {
                "id": 2,
                "providerId":  9,
                "channelId":  66,
                "active":  true,
                "merchantCode": "000000009   00000006  5", 
                "secretKey": "XXXXXXX"
            }

+ Response 400 (application/json)

        {
          "error": "Bad request",
          "error_description": "There was a syntax error, check your params request and try it again."
        }